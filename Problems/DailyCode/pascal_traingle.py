# 프로그램 설명:
# 이 프로그램은 주어진 정수 `rowIndex`에 해당하는 파스칼의 삼각형의 특정 행을 반환합니다.
# 파스칼의 삼각형에서 각 숫자는 바로 위의 두 숫자의 합으로 구성됩니다.
# 예를 들어, rowIndex가 3일 때, 파스칼의 삼각형의 3번째 행은 [1, 3, 3, 1]입니다.

from typing import List

# Solution 클래스 정의
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        """
        주어진 rowIndex에 해당하는 파스칼의 삼각형의 행을 반환합니다.
        
        :param rowIndex: 반환할 파스칼의 삼각형의 행 인덱스 (0-인덱스)
        :return: 파스칼의 삼각형의 해당 행을 리스트로 반환
        """
        row = [1]  # 첫 번째 행은 항상 [1]입니다.

        for i in range(1, rowIndex + 1):
            # 이전 행을 기준으로 새로운 행을 생성합니다.
            # 새로운 행의 끝도 항상 1이므로, 시작은 [1]
            new_row = [1]
            
            # 이전 행의 인접한 두 수를 더하여 새로운 수를 생성합니다.
            for j in range(1, len(row)):
                new_row.append(row[j - 1] + row[j])
            
            # 새로운 행의 끝도 항상 1이므로, 1을 추가합니다.
            new_row.append(1)
            
            # 현재 행을 업데이트합니다.
            row = new_row

        return row

# 테스트를 위한 헬퍼 함수
def main():
    # Solution 클래스의 인스턴스 생성
    solution = Solution()
    
    # 테스트 케이스 목록
    test_cases = [
        (3, [1, 3, 3, 1]),
        (0, [1]),
        (1, [1, 1]),
        (4, [1, 4, 6, 4, 1]),
        (5, [1, 5, 10, 10, 5, 1]),
        (10, [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]),
        (20, [
            1, 20, 190, 1140, 4845, 15504, 38760, 77520, 125970, 167960,
            184756, 167960, 125970, 77520, 38760, 15504, 4845, 1140, 190, 20, 1
        ]),
    ]
    
    # 각 테스트 케이스에 대해 결과를 검증
    for idx, (input_rowIndex, expected) in enumerate(test_cases, 1):
        result = solution.getRow(input_rowIndex)
        print(f"Test Case {idx}:")
        print(f"Input: rowIndex = {input_rowIndex}")
        print(f"Expected Output: {expected}")
        print(f"Actual Output:   {result}")
        print("PASS" if result == expected else "FAIL")
        print("-" * 50)

# 프로그램 실행
if __name__ == "__main__":
    main()

"""
프로그램 실행 결과:

Test Case 1:
Input: rowIndex = 3
Expected Output: [1, 3, 3, 1]
Actual Output:   [1, 3, 3, 1]
PASS
--------------------------------------------------
Test Case 2:
Input: rowIndex = 0
Expected Output: [1]
Actual Output:   [1]
PASS
--------------------------------------------------
Test Case 3:
Input: rowIndex = 1
Expected Output: [1, 1]
Actual Output:   [1, 1]
PASS
--------------------------------------------------
Test Case 4:
Input: rowIndex = 4
Expected Output: [1, 4, 6, 4, 1]
Actual Output:   [1, 4, 6, 4, 1]
PASS
--------------------------------------------------
Test Case 5:
Input: rowIndex = 5
Expected Output: [1, 5, 10, 10, 5, 1]
Actual Output:   [1, 5, 10, 10, 5, 1]
PASS
--------------------------------------------------
Test Case 6:
Input: rowIndex = 10
Expected Output: [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]
Actual Output:   [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]
PASS
--------------------------------------------------
Test Case 7:
Input: rowIndex = 20
Expected Output: [1, 20, 190, 1140, 4845, 15504, 38760, 77520, 125970, 167960, 184756, 167960, 125970, 77520, 38760, 15504, 4845, 1140, 190, 20, 1]
Actual Output:   [1, 20, 190, 1140, 4845, 15504, 38760, 77520, 125970, 167960, 184756, 167960, 125970, 77520, 38760, 15504, 4845, 1140, 190, 20, 1]
PASS
--------------------------------------------------
"""

# 코드 설명:

1. **파스칼의 삼각형 이해**:
    - 파스칼의 삼각형은 각 숫자가 바로 위의 두 숫자의 합으로 구성됩니다.
    - 예를 들어, 3번째 행 `[1, 3, 3, 1]`은 2번째 행 `[1, 2, 1]`에서 인접한 두 숫자를 더하여 생성됩니다.

2. **`getRow` 함수의 동작**:
    - `rowIndex`가 0일 때는 `[1]`을 반환합니다.
    - 각 행을 순차적으로 생성하면서, 이전 행을 바탕으로 새로운 행을 만듭니다.
    - 새로운 행의 첫 번째와 마지막 숫자는 항상 `1`입니다.
    - 중간의 숫자들은 이전 행의 인접한 두 숫자를 더하여 생성됩니다.

3. **테스트 케이스**:
    - 다양한 `rowIndex`에 대해 예상 결과와 실제 결과를 비교하여 함수의 정확성을 검증합니다.
    - 테스트 케이스에는 기본적인 예제 외에도 추가적인 행을 포함하여 다양한 경우를 다룹니다.

4. **시간 및 공간 복잡도**:
    - **시간 복잡도**: O(rowIndex²)
        - 각 행을 생성하는 데 이전 행의 모든 요소를 한 번씩 방문하므로, 총 O(rowIndex²) 시간이 소요됩니다.
    - **공간 복잡도**: O(rowIndex)
        - 각 행은 최대 `rowIndex + 1`개의 요소를 가지므로, 공간 복잡도는 O(rowIndex)입니다.

5. **최적화 고려 사항**:
    - 이 문제는 `rowIndex`의 최대 값이 33이므로, 현재의 단순한 반복 방식으로도 충분히 효율적입니다.
    - 더 큰 `rowIndex`에 대해 최적화가 필요할 경우, 조합 공식을 활용하여 각 요소를 직접 계산할 수도 있습니다.

6. **파이썬의 리스트 활용**:
    - 파이썬의 리스트는 동적으로 크기가 조정될 수 있어, 파스칼의 삼각형 각 행을 쉽게 생성할 수 있습니다.
    - 새로운 행을 생성할 때, 기존 행을 기반으로 새로운 리스트를 만들어 추가합니다.

이 코드는 파스칼의 삼각형에서 특정 행을 효율적으로 생성하며, 다양한 테스트 케이스를 통해 함수의 정확성을 검증할 수 있습니다. 주어진 `rowIndex`에 따라 원하는 행을 정확하게 반환하여 문제를 해결합니다.

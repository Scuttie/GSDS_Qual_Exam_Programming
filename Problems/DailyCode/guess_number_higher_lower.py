"""
문제 설명:

우리는 추측 게임(Guessing Game)을 하고 있습니다. 게임은 다음과 같이 진행됩니다:

1. 나는 1부터 n까지의 숫자 중 하나를 고릅니다.
2. 당신은 숫자를 하나 추측합니다.
3. 만약 당신이 올바른 숫자를 추측했다면, 게임에서 승리합니다.
4. 만약 당신이 틀린 숫자를 추측했다면, 나는 당신에게 내가 고른 숫자가 더 높거나 낮다고 알려줍니다. 그리고 당신은 계속해서 숫자를 추측할 수 있습니다.
5. 당신이 틀린 숫자 x를 추측할 때마다, 당신은 x 달러를 지불합니다. 만약 돈이 다 떨어지면, 게임에서 패배합니다.

주어진 n에 대해, 어떤 숫자를 내가 선택했든 간에 승리를 보장하기 위해 필요한 최소 금액을 반환하는 함수를 작성하세요. 만약 어떤 거래도 이익을 낼 수 없다면 0을 반환해야 합니다.

예를 들어, n = 10인 경우:
- 범위는 [1,10]입니다. 
- 7을 추측하면:
    - 만약 내가 7을 선택했다면, 총 비용은 0입니다.
    - 만약 내가 더 높은 숫자를 선택했다면, 범위는 [8,10]이 되고 9를 추측합니다.
        - 만약 내가 9를 선택했다면, 총 비용은 7입니다.
        - 만약 내가 10을 선택했다면, 총 비용은 7 + 9 = 16입니다.
    - 만약 내가 더 낮은 숫자를 선택했다면, 범위는 [1,6]이 되고 3을 추측합니다.
        - 만약 내가 3을 선택했다면, 총 비용은 7입니다.
        - 만약 내가 더 높은 숫자를 선택했다면, 범위는 [4,6]이 되고 5를 추측합니다.
            - 만약 내가 5를 선택했다면, 총 비용은 7 + 3 = 10입니다.
            - 만약 내가 6을 선택했다면, 총 비용은 7 + 3 + 5 = 15입니다.
        - 만약 내가 더 낮은 숫자를 선택했다면, 범위는 [1,2]이 되고 1을 추측합니다.
            - 만약 내가 1을 선택했다면, 총 비용은 7 + 3 = 10입니다.
            - 만약 내가 2를 선택했다면, 총 비용은 7 + 3 + 1 = 11입니다.
- 모든 시나리오에서 가장 큰 비용은 16이므로, 16달러면 어떤 숫자를 선택하더라도 승리를 보장할 수 있습니다.

def solution(n):
    """
    주어진 n에 대해, 어떤 숫자를 내가 선택했든 간에 승리를 보장하기 위해 필요한 최소 금액을 반환합니다.
    
    :param n: 정수 n (1 <= n <= 200)
    :return: 최소 비용
    """
    # 동적 프로그래밍 테이블 초기화
    dp = [[0] * (n + 1) for _ in range(n + 1)]
    
    # 구간의 길이를 2부터 n까지 증가시키며 계산
    for length in range(2, n + 1):
        for start in range(1, n - length + 2):
            end = start + length - 1
            dp[start][end] = float('inf')  # 초기값을 무한대로 설정
            # 가능한 모든 m을 선택하여 최소 비용을 찾음
            for m in range(start, end):
                cost = m + max(dp[start][m - 1], dp[m + 1][end])
                if cost < dp[start][end]:
                    dp[start][end] = cost
    return dp[1][n] if n > 0 else 0

# 테스트를 위한 메인 함수
def main():
    test_cases = [
        {
            'n': 10,
            'expected': 16
        },
        {
            'n': 1,
            'expected': 0
        },
        {
            'n': 2,
            'expected': 1
        },
        {
            'n': 3,
            'expected': 2
        },
        {
            'n': 4,
            'expected': 4
        },
        {
            'n': 5,
            'expected': 6
        },
        {
            'n': 6,
            'expected': 7
        },
        {
            'n': 7,
            'expected': 10
        },
        {
            'n': 8,
            'expected': 12
        },
        {
            'n': 9,
            'expected': 14
        },
    ]
    
    for idx, test in enumerate(test_cases, 1):
        n = test['n']
        expected = test['expected']
        result = solution(n)
        print(f"테스트 케이스 {idx}: n = {n}")
        print(f"예상 출력: {expected}")
        print(f"실제 출력: {result}")
        print("PASS" if result == expected else "FAIL")
        print("-" * 50)

if __name__ == "__main__":
    main()
